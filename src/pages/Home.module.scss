@import '../Variables.scss';

.fullpage {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    max-width: 100%;

    padding: 0;
    min-height: 100vh;

    &.fullpagePadBottom {
        padding: 0 0 120px 0;
    }

    // &.stretchy {
    //     justify-content: flex-start;
    // }

    .containerCenter {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;

        margin: 0 auto;
    
        padding: 16px;
    
        h1 {
            margin-bottom: 16px;
    
            text-align: center;
    
            color: $color_white;
        }
    
        h3 {
            text-align: center;
        }
    
        .linkButton {
            margin-top: 36px;
        }
    }

    .contentWrapper {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        height: 100%;
        margin: 0 16px 64px 16px;

        h2 {
            margin: 16px;
        }

        h3 {
            margin: 0 0 16px 0;
        }

        .imageCarouselWrapper {
            max-height: 420px;
            margin: 16px 32px;
        }

        p {
            margin: 16px 0 32px 0;

            text-align: center;

            color: $color_white;
        }
    }
}

.IMGbg1 {
    background-image: url('../assets/images/emmanuel-WcrqKjgMPfI-unsplash.jpg');
    background-size: cover;
}
.IMGbg2 {
    background-image: url('../assets/images/constant-loubier-7lzIyp2Ork4-unsplash.jpg');
    background-size: cover;
}
.IMGbg3 {
    background-image: url('../assets/images/jodyhongfilms-sI1mbxJFFpU-unsplash.jpg');
    background-size: cover;
    background-position: center;
}
.bgOverlayBlack {
    background-color: rgba(0,0,0,0.8);
}
.bgOverlayBlue {
    background-color: transparentize($color: $color_ycblue, $amount: 0.2);
}

@keyframes scrollIndicatorAnim {
    0% {
        padding: 16px;
        opacity: 0.2;
    }
    50% {
        padding: 24px 16px 8px 16px;
        opacity: 1;
    }
    100% {
        padding: 16px;
        opacity: 0.2;
    }
}

.scrollIndicator {
    position: absolute;
    bottom: 32px;

    cursor: pointer;

    transition: $transition_time_link;

    i {
        padding: 16px;
        color: $color_white;
        animation: scrollIndicatorAnim 2s ease-in-out infinite;
    }

    &.hidden { opacity: 0; }
}

.hero {
    max-width: 100%;

    .heroInnerWrapper {
        display: grid;
        grid-template-columns: minmax(0, 1fr) 1fr;
        grid-template-rows: repeat(2, auto-fit);
        box-sizing: border-box;

        max-width: 1280px; //todo: consider changing to fit 4k screens nicer
        padding: 0 16px 64px 16px; // 128px to cater for next hero's image
        margin: 0 auto; // center
    }

    &.heroImageLeft {
        .heroImage { grid-area: 1 / 1 / 2 / 2; }
        .sectionHeader { grid-area: 1 / 2 / 2 / 3; }
        .heroContentWrapper { grid-area: 2 / 1 / 3 / 3; }
    }
    &.heroImageRight {
        // row-s col-s row-e col-e
        .heroImage { grid-area: 1 / 2 / 2 / 3; }
        .sectionHeader { grid-area: 1 / 1 / 2 / 2; }
        .heroContentWrapper { grid-area: 2 / 1 / 3 / 3; }
    }
    &.heroImageCenter {
        grid-template-columns: 1fr;
        grid-template-rows: repeat(2, auto-fit);
        .sectionHeader { grid-area: 1 / 1 / 2 / 2; }
        .heroContentWrapper { grid-area: 2 / 1 / 3 / 2; }
    }

    &.heroBlack {
        background-color: $color_black;
        color: $color_white;
    }

    &.textWhite {
        h2, p {
            color: $color_white;
        }
    }

    .heroImage {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        justify-content: flex-start;

        max-height: 320px;
        max-width: 100%;
        margin: -64px 0 0 0; // margin: 0; pins element edges to parent edges

        box-shadow: 0 0 16px rgba(0,0,0,0.4);

        .linkButton a {
            width: 100%;

            box-shadow: none;
            &:hover { box-shadow: none; }
        }

        img {
            object-fit: cover;
            min-height: 240px;
            height: 100%;
            max-width: 100%;
        }
    }

    .heroContentWrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;

        padding: 64px 0;
        &.noTopMargin { padding: 0 0 64px 0; }

        p {
            margin: 0 auto 64px auto;
            padding: 0 32px;

            text-align: center;
        }

        // todo:
        // make each element in this grid aligned vertically, eg:
        /*
            | Item one                  | Item six
            | Item two is long          | Item seven is long
            | Three                     | Item eight
            | Item four is even longer  | Item nine
            | Item five                 | Item X
        */
        // collapse to list on small screen sizes
        // this should be possible with flex but i cannot figure it out yet
        ul.listGrid {
            display: grid;
            grid-template-columns: repeat(2, max-content);
            grid-template-rows: repeat(auto-fit 1fr);

            max-width: max-content; // shouldn't have to do this, but alas, I must.
            margin: 0 auto;
    
            li {
                box-sizing: border-box;

                padding: 8px 24px 8px 8px;
                border-bottom: 2px solid $color_grey;
                font-weight: bold;

                &:nth-last-child(-n+2) {
                    border-bottom: none; //![last row border] if @media query is updated, this should be double-checked
                }
            }
        }

        ul.flexRelevantUnits {
            display: flex;
            justify-content: center;
            align-items: stretch;
            flex-wrap: wrap;

            li {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;

                padding: 32px 16px;
                margin: 8px;
                max-width: 320px;

                text-align: center;

                color: white;
                
                &.fruGreen { background-color: $color_green; }
                &.fruLilac { background-color: $color_lilac; }
                &.fruOrange { background-color: $color_orange; }
                &.fruBlue { background-color: $color_blue; }
                &.fruBrown { background-color: $color_brown; }

                h4 {
                    margin-bottom: 16px;

                    &.fruInterest {}
                    &.fruUnits {}
                }

                p {
                    padding: 0 16px 0 16px;
                    margin: 0;
                }

                .fruUnits {
                    display: none;
                }

                ul.fruUnits {
                    li {
                        padding: 0;
                    }
                }
            }
        }

        .buttons div {
            margin: 0 16px;
        }
    }
}

.sectionHeader {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    padding: 48px 16px;

    text-align: center;

    h2 {
        margin-bottom: 32px;
    }

    p {
        max-width: 44ch;
    }
}

@media only screen and (max-width: $media_screen_max_width) {
    .hero { // For some reason, this nesting is required, and it won't properly
        // set the grid-area for heroImageLeft/Right if it's not done
        // this way. The weird quirks of CSS, or just me? Who knows...
        .heroInnerWrapper {
            grid-template-columns: 1fr;
            grid-template-rows: repeat(3, auto-fit);

            .heroContentWrapper {
                padding: 0;
                margin: 0 0 64px 0;
            }

            ul.listGrid {
                grid-template-columns: 1fr;

                li {
                    border-bottom: none;
                    border-left: 2px solid $color_grey;
                }
            }
        }

        &.heroImageLeft, &.heroImageRight {
            .heroImage { grid-area: 1 / 1 / 2 / 2; }
            .sectionHeader { grid-area: 2 / 1 / 3 / 2; }
            .heroContentWrapper { grid-area: 3 / 1 / 4 / 2; } // not working
        }
    }
}